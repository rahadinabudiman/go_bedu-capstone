basePath: /api/v1
definitions:
  dtos.AdminCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.AdminDetailResponse'
      message:
        example: Successfully registered
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.AdminDetailResponse:
    properties:
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      email:
        type: string
      id:
        type: integer
      nama:
        type: string
      role:
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      username:
        example: r4ha
        type: string
    required:
    - username
    type: object
  dtos.AdminStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.AdminDetailResponse'
      message:
        example: Successfully get user credentials
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.ArticleCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleDetailResponse'
      message:
        example: Successfully created article
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.ArticleDetailResponse:
    properties:
      abstract:
        example: abstract/pengantar
        type: string
      article_id:
        example: 1
        type: integer
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      description:
        example: isi artikel
        type: string
      image:
        example: gambar2.jpg
        type: string
      label:
        example: kebugaran
        type: string
      slug:
        example: judularticle
        type: string
      thumbnail:
        example: gambar1.jpg
        type: string
      title:
        example: judulArticle
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
    type: object
  dtos.ArticleLiked:
    properties:
      article_id:
        type: integer
      user_id:
        type: integer
    type: object
  dtos.ArticleStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleDetailResponse'
      message:
        example: Successfully get article
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.BadRequestResponse:
    properties:
      errors: {}
      message:
        example: Bad Request
        type: string
      status_code:
        example: 400
        type: integer
    type: object
  dtos.ChangePasswordAdminOKResponse:
    properties:
      message:
        example: Password has been reset successfully
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.ChangePasswordAdminRequest:
    properties:
      old_password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      passwordconfirm:
        example: rahadinabudimansundara
        minLength: 6
        type: string
    type: object
  dtos.ChangePasswordOKResponse:
    properties:
      email:
        example: me@r4ha.com
        type: string
      message:
        example: Password has been reset successfully
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.ChangePasswordRequest:
    properties:
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      passwordconfirm:
        example: rahadinabudimansundara
        minLength: 6
        type: string
    type: object
  dtos.ChangePasswordUserOKResponse:
    properties:
      message:
        example: Password has been reset successfully
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.ChangePasswordUserRequest:
    properties:
      old_password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      passwordconfirm:
        example: rahadinabudimansundara
        minLength: 6
        type: string
    type: object
  dtos.CreateArticlesRequest:
    properties:
      abstract:
        example: abstract/pengantar
        type: string
      administrator_id:
        example: 1
        type: integer
      description:
        example: isi artikel
        type: string
      image:
        example: link image
        type: string
      label:
        example: kebugaran
        type: string
      thumbnail:
        example: gambar1.jpg
        type: string
      title:
        example: judulArticle
        type: string
    type: object
  dtos.DeleteAdminRequest:
    properties:
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
    type: object
  dtos.DeleteUserRequest:
    properties:
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
    type: object
  dtos.ForbiddenResponse:
    properties:
      errors: {}
      message:
        example: Forbidden
        type: string
      status_code:
        example: 403
        type: integer
    type: object
  dtos.ForgotPasswordOKResponse:
    properties:
      email:
        example: me@r4ha.com
        type: string
      message:
        example: OTP has been sent to your email
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.ForgotPasswordRequest:
    properties:
      email:
        example: me@r4ha.com
        type: string
    required:
    - email
    type: object
  dtos.GetAllAdminsResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.AdminDetailResponse'
      message:
        example: Successfully registered
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.GetAllArticleStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleDetailResponse'
      message:
        example: Successfully get article
        type: string
      meta:
        $ref: '#/definitions/helpers.Meta'
      status_code:
        example: 200
        type: integer
    type: object
  dtos.GetAllUserResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserDetailResponse'
      message:
        example: Successfully registered
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.InternalServerErrorResponse:
    properties:
      errors: {}
      message:
        example: Internal Server Error
        type: string
      status_code:
        example: 500
        type: integer
    type: object
  dtos.LikedStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.ArticleLiked'
      message:
        example: Successfully liked
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.LoginRequest:
    properties:
      password:
        example: rahadinabudimansundara
        type: string
      username:
        example: r4ha
        type: string
    required:
    - password
    - username
    type: object
  dtos.LoginStatusOKResponse:
    properties:
      status_code:
        example: 200
        type: integer
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      username:
        example: r4ha
        type: string
    required:
    - token
    - username
    type: object
  dtos.LogoutAdminOKResponse:
    properties:
      message:
        example: Logout Success
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.LogoutUserResponse:
    properties:
      message:
        example: Logout Success
        type: string
    type: object
  dtos.NotFoundResponse:
    properties:
      errors: {}
      message:
        example: Not Found
        type: string
      status_code:
        example: 404
        type: integer
    type: object
  dtos.RegisterAdminRequest:
    properties:
      email:
        example: me@r4ha.com
        type: string
      nama:
        example: Rahadina Budiman Sundara
        type: string
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      passwordconfirm:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      role:
        example: Admin
        type: string
      username:
        example: r4ha
        type: string
      verified:
        example: false
        type: boolean
    required:
    - email
    - nama
    - username
    type: object
  dtos.RegisterUserRequest:
    properties:
      email:
        example: me@r4ha.com
        type: string
      nama:
        example: Rahadina Budiman Sundara
        type: string
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      passwordconfirm:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      role:
        example: Admin
        type: string
      username:
        example: r4ha
        type: string
      verified:
        example: false
        type: boolean
    required:
    - email
    - nama
    - username
    type: object
  dtos.StatusOKDeletedResponse:
    properties:
      errors: {}
      message:
        example: Successfully deleted
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.StatusOKResponse:
    properties:
      data: {}
      message:
        example: Successfully
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.UnauthorizedResponse:
    properties:
      errors: {}
      message:
        example: Unauthorized
        type: string
      status_code:
        example: 401
        type: integer
    type: object
  dtos.UpdateAdminRequest:
    properties:
      email:
        example: me@r4ha.com
        type: string
      nama:
        example: Rahadina Budiman Sundara
        type: string
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      role:
        example: Admin
        type: string
      username:
        example: r4ha
        type: string
    required:
    - email
    - nama
    - username
    type: object
  dtos.UpdateUserRequest:
    properties:
      email:
        example: me@r4ha.com
        type: string
      nama:
        example: Rahadina Budiman Sundara
        type: string
      password:
        example: rahadinabudimansundara
        minLength: 6
        type: string
      role:
        example: Admin
        type: string
      username:
        example: r4ha
        type: string
    required:
    - email
    - nama
    - username
    type: object
  dtos.UserCreeatedResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserDetailResponse'
      message:
        example: Successfully registered
        type: string
      status_code:
        example: 201
        type: integer
    type: object
  dtos.UserDetailResponse:
    properties:
      created_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      email:
        type: string
      id:
        type: integer
      nama:
        type: string
      role:
        type: string
      updated_at:
        example: "2023-05-17T15:07:16.504+07:00"
        type: string
      username:
        example: r4ha
        type: string
    required:
    - username
    type: object
  dtos.UserStatusOKResponse:
    properties:
      data:
        $ref: '#/definitions/dtos.UserDetailResponse'
      message:
        example: Successfully get user credentials
        type: string
      status_code:
        example: 200
        type: integer
    type: object
  dtos.VerifyEmailOKResponse:
    properties:
      message:
        example: Email has been verified
        type: string
      status_code:
        example: 200
        type: integer
      username:
        example: r4ha
        type: string
    required:
    - username
    type: object
  helpers.Meta:
    properties:
      current_page:
        example: 1
        type: integer
      next_page: {}
      prev_page:
        example: 1
        type: integer
      total:
        example: 1
        type: integer
    type: object
  models.Url:
    properties:
      url:
        type: string
    required:
    - url
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: capstone.keyzex.com
info:
  contact:
    name: Dicoding Cycle 4 TEAM C23-M4058
    url: https://github.com/Capstone-Dicoding-Cycle-4-C23-M4058
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: bEDU Documentation API
  version: "1.0"
paths:
  /admin:
    get:
      consumes:
      - application/json
      description: Get all admins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllAdminsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all admins
      tags:
      - Admin - Account
  /admin/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an Admin
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.DeleteAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an Admin
      tags:
      - Admin - Account
    get:
      consumes:
      - application/json
      description: Get admin by ID
      parameters:
      - description: ID admin
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AdminStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get admin by ID
      tags:
      - Admin - Account
    put:
      consumes:
      - application/json
      description: Admin update an information
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AdminStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Information
      tags:
      - Admin - Account
  /admin/article:
    post:
      consumes:
      - application/json
      description: Create a new article
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateArticlesRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.ArticleCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new article
      tags:
      - Admin - Article
  /admin/article/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a article
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a article
      tags:
      - Admin - Article
    put:
      consumes:
      - application/json
      description: Update article
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateArticlesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update article
      tags:
      - Admin - Article
  /admin/change-password:
    post:
      consumes:
      - application/json
      description: Change Password Admin
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ChangePasswordAdminRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ChangePasswordAdminOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Change Password Admin
      tags:
      - Admin - Account
  /admin/change-password/{otp}:
    post:
      consumes:
      - application/json
      description: Change Password an Account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ChangePasswordOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Change Password by OTP
      tags:
      - Admin - Auth
  /admin/login:
    post:
      consumes:
      - application/json
      description: Login an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LoginStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Login Admin with Username and Password
      tags:
      - Admin - Auth
  /admin/logout:
    get:
      consumes:
      - application/json
      description: Logout Administrator
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LogoutAdminOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout Administrator
      tags:
      - Admin - Account
  /admin/register:
    post:
      consumes:
      - application/json
      description: Register an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.RegisterAdminRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.AdminCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Register Admin
      tags:
      - Admin - Auth
  /admin/verifyemail/{verificationCode}:
    get:
      consumes:
      - application/json
      description: Verif an account
      parameters:
      - description: Verification Code
        in: path
        name: verification_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.VerifyEmailOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Verify Email by Verification Code
      tags:
      - Admin - Auth
  /article:
    get:
      consumes:
      - application/json
      description: Get all articles
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get all articles
      tags:
      - Article
  /article/{id}:
    get:
      consumes:
      - application/json
      description: Get article by ID
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ArticleStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Get article by ID
      tags:
      - Article
  /article/like/{id}:
    get:
      consumes:
      - application/json
      description: Create Bookmark by Article ID
      parameters:
      - description: ID article
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LikedStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Bookmark by Article ID
      tags:
      - Article
  /change-password/{otp}:
    post:
      consumes:
      - application/json
      description: Change Password an Account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ChangePasswordOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Change Password by OTP
      tags:
      - User - Auth
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Forgot Password an Account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ForgotPasswordOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Forgot Password Request OTP
      tags:
      - Utils - Authentikasi
  /login:
    post:
      consumes:
      - application/json
      description: Login an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LoginStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Login User with Username and Password
      tags:
      - User - Auth
  /logout:
    get:
      consumes:
      - application/json
      description: Logout User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LogoutUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout User
      tags:
      - User - Account
  /public/cloudinary/file-upload:
    post:
      consumes:
      - application/json
      description: Upload file to cloudinary
      parameters:
      - description: Photo file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Upload file
      tags:
      - Cloudinary
  /public/cloudinary/url-upload:
    post:
      consumes:
      - application/json
      description: Upload file to cloudinary
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Url'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Upload file
      tags:
      - Cloudinary
  /register:
    post:
      consumes:
      - application/json
      description: Register an account
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserCreeatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Register User
      tags:
      - User - Auth
  /user:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.GetAllUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - User - Account
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an User
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.DeleteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.StatusOKDeletedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an User
      tags:
      - User - Account
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: ID user
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - User - Account
    put:
      consumes:
      - application/json
      description: User update an information
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Information
      tags:
      - User - Account
  /user/change-password:
    post:
      consumes:
      - application/json
      description: Change Password User
      parameters:
      - description: Payload Body [RAW]
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ChangePasswordUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ChangePasswordUserOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Change Password User
      tags:
      - User - Account
  /user/liked/{id}:
    get:
      consumes:
      - application/json
      description: Get Bookmark by User ID
      parameters:
      - description: ID user
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.LikedStatusOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Bookmark by User ID
      tags:
      - User - Account
  /verifyemail/{verificationCode}:
    get:
      consumes:
      - application/json
      description: Verif an account
      parameters:
      - description: Verification Code
        in: path
        name: verification_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.VerifyEmailOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.UnauthorizedResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ForbiddenResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.NotFoundResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.InternalServerErrorResponse'
      summary: Verify Email by Verification Code
      tags:
      - User - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
